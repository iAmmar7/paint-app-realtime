[{"/home/vend/VSCode/paint-app-realtime/client/src/index.jsx":"1","/home/vend/VSCode/paint-app-realtime/client/src/App.jsx":"2","/home/vend/VSCode/paint-app-realtime/client/src/hooks/usePainter.js":"3","/home/vend/VSCode/paint-app-realtime/client/src/components/Canvas.jsx":"4","/home/vend/VSCode/paint-app-realtime/client/src/components/Toolbar.jsx":"5","/home/vend/VSCode/paint-app-realtime/client/src/components/BrushPreview.jsx":"6","/home/vend/VSCode/paint-app-realtime/client/src/constants/index.js":"7","/home/vend/VSCode/paint-app-realtime/client/src/components/CanvasV2.jsx":"8","/home/vend/VSCode/paint-app-realtime/client/src/utils/functions.js":"9","/home/vend/VSCode/paint-app-realtime/client/src/hooks/useHistory.js":"10","/home/vend/VSCode/paint-app-realtime/client/src/components/ToolbarV2.jsx":"11"},{"size":244,"mtime":1636891781813,"results":"12","hashOfConfig":"13"},{"size":1850,"mtime":1637089445835,"results":"14","hashOfConfig":"13"},{"size":6907,"mtime":1637079010577,"results":"15","hashOfConfig":"13"},{"size":1487,"mtime":1637078721779,"results":"16","hashOfConfig":"13"},{"size":5484,"mtime":1637091957511,"results":"17","hashOfConfig":"13"},{"size":499,"mtime":1636893967372,"results":"18","hashOfConfig":"13"},{"size":67,"mtime":1636897361329,"results":"19","hashOfConfig":"13"},{"size":8281,"mtime":1637092606032,"results":"20","hashOfConfig":"13"},{"size":4825,"mtime":1637088227873,"results":"21","hashOfConfig":"13"},{"size":844,"mtime":1637088122524,"results":"22","hashOfConfig":"13"},{"size":1139,"mtime":1637088465809,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"cbn8uh",{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"26"},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/vend/VSCode/paint-app-realtime/client/src/index.jsx",[],["48","49"],"/home/vend/VSCode/paint-app-realtime/client/src/App.jsx",["50","51","52","53","54"],"/home/vend/VSCode/paint-app-realtime/client/src/hooks/usePainter.js",["55","56","57"],"import { useCallback, useRef, useState, useEffect } from 'react';\n\nimport constants from '../constants';\n\nconst usePainter = (socket) => {\n  const canvas = useRef();\n  const [isRegularMode, setIsRegularMode] = useState(true);\n  const [isLineMode, setIsLineMode] = useState(false);\n  const [isAutoWidth, setIsAutoWidth] = useState(false);\n  const [isEraser, setIsEraser] = useState(false);\n  const [currentColor, setCurrentColor] = useState('#000000');\n  const [currentWidth, setCurrentWidth] = useState(constants.brushSize);\n\n  const autoWidth = useRef(false);\n  const selectedSaturation = useRef(100);\n  const selectedLightness = useRef(50);\n  const selectedColor = useRef('#000000');\n  const selectedLineWidth = useRef(constants.brushSize);\n  const lastX = useRef(0);\n  const lastY = useRef(0);\n  const hue = useRef(0);\n  const isDrawing = useRef(false);\n  const direction = useRef(true);\n  const isRegularPaintMode = useRef(true);\n  const isEraserMode = useRef(false);\n\n  const ctx = useRef(canvas?.current?.getContext('2d'));\n\n  // useEffect(() => {\n  //   socket.on('canvas-data', (data) => {\n  //     const image = new Image();\n  //     const canvasCtx = canvas.current.getContext('2d');\n  //     image.onload = () => canvasCtx.drawImage(image, 0, 0);\n  //     image.src = data.image;\n  //   });\n  // }, [socket]);\n\n  const drawOnCanvas = useCallback((event) => {\n    if (!ctx || !ctx.current) {\n      return;\n    }\n    ctx.current.beginPath();\n    ctx.current.moveTo(lastX.current, lastY.current);\n    ctx.current.lineTo(event.offsetX, event.offsetY);\n    ctx.current.stroke();\n\n    [lastX.current, lastY.current] = [event.offsetX, event.offsetY];\n  }, []);\n\n  const drawLine = useCallback((event) => {\n    if (!ctx || !ctx.current) {\n      return;\n    }\n\n    // Clear previous line\n    ctx.current.clearRect(0, 0, canvas.current.width, canvas.current.height);\n\n    // Draw new line\n    ctx.current.beginPath();\n    ctx.current.moveTo(lastX.current, lastY.current);\n    ctx.current.lineTo(event.offsetX, event.offsetY);\n    ctx.current.stroke();\n  }, []);\n\n  const handleMouseDown = useCallback((e) => {\n    isDrawing.current = true;\n    [lastX.current, lastY.current] = [e.offsetX, e.offsetY];\n  }, []);\n\n  const dynamicLineWidth = useCallback(() => {\n    if (!ctx || !ctx.current) {\n      return;\n    }\n    if (ctx.current.lineWidth > 90 || ctx.current.lineWidth < 10) {\n      direction.current = !direction.current;\n    }\n    direction.current ? ctx.current.lineWidth++ : ctx.current.lineWidth--;\n    setCurrentWidth(ctx.current.lineWidth);\n  }, []);\n\n  const drawNormal = useCallback(\n    (e) => {\n      if (!isDrawing.current || !ctx.current) return;\n\n      if (isRegularPaintMode.current || isEraserMode.current) {\n        ctx.current.strokeStyle = selectedColor.current;\n\n        setCurrentColor(selectedColor.current);\n\n        autoWidth.current && !isEraserMode.current\n          ? dynamicLineWidth()\n          : (ctx.current.lineWidth = selectedLineWidth.current);\n\n        isEraserMode.current\n          ? (ctx.current.globalCompositeOperation = 'destination-out')\n          : (ctx.current.globalCompositeOperation = 'source-over');\n      } else {\n        setCurrentColor(`hsl(${hue.current},${selectedSaturation.current}%,${selectedLightness.current}%)`);\n        ctx.current.strokeStyle = `hsl(${hue.current},${selectedSaturation.current}%,${selectedLightness.current}%)`;\n        ctx.current.globalCompositeOperation = 'source-over';\n\n        hue.current++;\n\n        if (hue.current >= 360) hue.current = 0;\n\n        autoWidth.current ? dynamicLineWidth() : (ctx.current.lineWidth = selectedLineWidth.current);\n      }\n\n      if (isLineMode) {\n        drawLine(e);\n      } else {\n        drawOnCanvas(e);\n      }\n    },\n    [isLineMode, dynamicLineWidth, drawLine, drawOnCanvas]\n  );\n\n  const stopDrawing = useCallback(() => {\n    isDrawing.current = false;\n\n    // const image = canvas.current.toDataURL('image/png');\n    // socket.emit('canvas-data', { image });\n  }, [socket]);\n\n  const init = useCallback(() => {\n    ctx.current = canvas?.current?.getContext('2d');\n    if (canvas && canvas.current && ctx && ctx.current) {\n      canvas.current.addEventListener('mousedown', handleMouseDown);\n      canvas.current.addEventListener('mousemove', drawNormal);\n      canvas.current.addEventListener('mouseup', stopDrawing);\n      canvas.current.addEventListener('mouseout', stopDrawing);\n\n      canvas.current.width = window.innerWidth - 196;\n      canvas.current.height = window.innerHeight;\n\n      ctx.current.strokeStyle = '#000';\n      ctx.current.lineJoin = 'round';\n      ctx.current.lineCap = 'round';\n      ctx.current.lineWidth = 10;\n    }\n  }, [drawNormal, handleMouseDown, stopDrawing]);\n\n  const handleRegularMode = useCallback(() => {\n    setIsRegularMode(true);\n    isEraserMode.current = false;\n    setIsEraser(false);\n    isRegularPaintMode.current = true;\n  }, []);\n\n  const handleSpecialMode = useCallback(() => {\n    setIsRegularMode(false);\n    isEraserMode.current = false;\n    setIsEraser(false);\n    isRegularPaintMode.current = false;\n  }, []);\n\n  const handleColor = (e) => {\n    setCurrentColor(e.currentTarget.value);\n    selectedColor.current = e.currentTarget.value;\n  };\n\n  const handleWidth = (e) => {\n    setCurrentWidth(e.currentTarget.value);\n    selectedLineWidth.current = e.currentTarget.value;\n  };\n\n  // const clearCanvas = useCallback(() => {\n  //   if (!ctx || !ctx.current || !canvas || !canvas.current) {\n  //     return;\n  //   }\n  //   ctx.current.clearRect(0, 0, canvas.current.width, canvas.current.height);\n  // }, []);\n\n  const handleEraserMode = (e) => {\n    autoWidth.current = false;\n    setIsAutoWidth(false);\n    setIsRegularMode(true);\n    isEraserMode.current = true;\n    setIsEraser(true);\n  };\n\n  const setCurrentSaturation = (e) => {\n    setCurrentColor(`hsl(${hue.current},${e.currentTarget.value}%,${selectedLightness.current}%)`);\n    selectedSaturation.current = e.currentTarget.value;\n  };\n\n  const setCurrentLightness = (e) => {\n    setCurrentColor(`hsl(${hue.current},${selectedSaturation.current}%,${e.currentTarget.value}%)`);\n    selectedLightness.current = e.currentTarget.value;\n  };\n\n  const setAutoWidth = (e) => {\n    autoWidth.current = e.currentTarget.checked;\n    setIsAutoWidth(e.currentTarget.checked);\n\n    if (!e.currentTarget.checked) {\n      setCurrentWidth(selectedLineWidth.current);\n    } else {\n      setCurrentWidth(ctx?.current?.lineWidth ?? selectedLineWidth.current);\n    }\n  };\n\n  return [\n    {\n      canvas,\n      ctx,\n      currentWidth,\n      currentColor,\n      isRegularMode,\n      isAutoWidth,\n      isEraser,\n    },\n    {\n      init,\n      handleRegularMode,\n      handleSpecialMode,\n      handleColor,\n      handleWidth,\n      // handleClear,\n      handleEraserMode,\n      setAutoWidth,\n      setCurrentSaturation,\n      setCurrentLightness,\n    },\n  ];\n};\n\nexport default usePainter;\n","/home/vend/VSCode/paint-app-realtime/client/src/components/Canvas.jsx",[],"/home/vend/VSCode/paint-app-realtime/client/src/components/Toolbar.jsx",["58","59","60"],"/home/vend/VSCode/paint-app-realtime/client/src/components/BrushPreview.jsx",[],"/home/vend/VSCode/paint-app-realtime/client/src/constants/index.js",[],"/home/vend/VSCode/paint-app-realtime/client/src/components/CanvasV2.jsx",[],"/home/vend/VSCode/paint-app-realtime/client/src/utils/functions.js",[],"/home/vend/VSCode/paint-app-realtime/client/src/hooks/useHistory.js",[],"/home/vend/VSCode/paint-app-realtime/client/src/components/ToolbarV2.jsx",[],{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","severity":1,"message":"66","line":4,"column":8,"nodeType":"67","messageId":"68","endLine":4,"endColumn":14},{"ruleId":"65","severity":1,"message":"69","line":6,"column":8,"nodeType":"67","messageId":"68","endLine":6,"endColumn":15},{"ruleId":"65","severity":1,"message":"70","line":21,"column":9,"nodeType":"67","messageId":"68","endLine":21,"endColumn":21},{"ruleId":"65","severity":1,"message":"71","line":30,"column":9,"nodeType":"67","messageId":"68","endLine":30,"endColumn":23},{"ruleId":"65","severity":1,"message":"72","line":48,"column":9,"nodeType":"67","messageId":"68","endLine":48,"endColumn":21},{"ruleId":"65","severity":1,"message":"73","line":1,"column":41,"nodeType":"67","messageId":"68","endLine":1,"endColumn":50},{"ruleId":"65","severity":1,"message":"74","line":8,"column":22,"nodeType":"67","messageId":"68","endLine":8,"endColumn":35},{"ruleId":"75","severity":1,"message":"76","line":123,"column":6,"nodeType":"77","endLine":123,"endColumn":14,"suggestions":"78"},{"ruleId":"65","severity":1,"message":"79","line":2,"column":3,"nodeType":"67","messageId":"68","endLine":2,"endColumn":15},{"ruleId":"65","severity":1,"message":"80","line":3,"column":3,"nodeType":"67","messageId":"68","endLine":3,"endColumn":11},{"ruleId":"65","severity":1,"message":"81","line":4,"column":3,"nodeType":"67","messageId":"68","endLine":4,"endColumn":10},"no-native-reassign",["82"],"no-negated-in-lhs",["83"],"no-unused-vars","'Canvas' is defined but never used.","Identifier","unusedVar","'Toolbar' is defined but never used.","'onCanvasData' is assigned a value but never used.","'emitCanvasData' is assigned a value but never used.","'toolbarProps' is assigned a value but never used.","'useEffect' is defined but never used.","'setIsLineMode' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useCallback has an unnecessary dependency: 'socket'. Either exclude it or remove the dependency array.","ArrayExpression",["84"],"'faArrowsAltH' is defined but never used.","'faEraser' is defined but never used.","'faMagic' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"85","fix":"86"},"Update the dependencies array to be: []",{"range":"87","text":"88"},[3991,3999],"[]"]