[{"/home/vend/VSCode/paint-app-realtime/client/src/index.jsx":"1","/home/vend/VSCode/paint-app-realtime/client/src/App.jsx":"2","/home/vend/VSCode/paint-app-realtime/client/src/hooks/usePainter.js":"3","/home/vend/VSCode/paint-app-realtime/client/src/components/Canvas.jsx":"4","/home/vend/VSCode/paint-app-realtime/client/src/components/Toolbar.jsx":"5","/home/vend/VSCode/paint-app-realtime/client/src/components/BrushPreview.jsx":"6","/home/vend/VSCode/paint-app-realtime/client/src/constants/index.js":"7","/home/vend/VSCode/paint-app-realtime/client/src/components/CanvasV2.jsx":"8","/home/vend/VSCode/paint-app-realtime/client/src/utils/functions.js":"9","/home/vend/VSCode/paint-app-realtime/client/src/hooks/useHistory.js":"10","/home/vend/VSCode/paint-app-realtime/client/src/components/ActionButton.jsx":"11"},{"size":244,"mtime":1636891781813,"results":"12","hashOfConfig":"13"},{"size":716,"mtime":1637347443669,"results":"14","hashOfConfig":"13"},{"size":6907,"mtime":1637079010577,"results":"15","hashOfConfig":"13"},{"size":1487,"mtime":1637078721779,"results":"16","hashOfConfig":"13"},{"size":6187,"mtime":1637345408885,"results":"17","hashOfConfig":"13"},{"size":499,"mtime":1636893967372,"results":"18","hashOfConfig":"13"},{"size":67,"mtime":1636897361329,"results":"19","hashOfConfig":"13"},{"size":7650,"mtime":1637403282852,"results":"20","hashOfConfig":"13"},{"size":4825,"mtime":1637088227873,"results":"21","hashOfConfig":"13"},{"size":844,"mtime":1637347370283,"results":"22","hashOfConfig":"13"},{"size":457,"mtime":1637403143948,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"cbn8uh",{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"32"},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"26"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/vend/VSCode/paint-app-realtime/client/src/index.jsx",[],["50","51"],"/home/vend/VSCode/paint-app-realtime/client/src/App.jsx",[],"/home/vend/VSCode/paint-app-realtime/client/src/hooks/usePainter.js",["52","53","54"],"import { useCallback, useRef, useState, useEffect } from 'react';\n\nimport constants from '../constants';\n\nconst usePainter = (socket) => {\n  const canvas = useRef();\n  const [isRegularMode, setIsRegularMode] = useState(true);\n  const [isLineMode, setIsLineMode] = useState(false);\n  const [isAutoWidth, setIsAutoWidth] = useState(false);\n  const [isEraser, setIsEraser] = useState(false);\n  const [currentColor, setCurrentColor] = useState('#000000');\n  const [currentWidth, setCurrentWidth] = useState(constants.brushSize);\n\n  const autoWidth = useRef(false);\n  const selectedSaturation = useRef(100);\n  const selectedLightness = useRef(50);\n  const selectedColor = useRef('#000000');\n  const selectedLineWidth = useRef(constants.brushSize);\n  const lastX = useRef(0);\n  const lastY = useRef(0);\n  const hue = useRef(0);\n  const isDrawing = useRef(false);\n  const direction = useRef(true);\n  const isRegularPaintMode = useRef(true);\n  const isEraserMode = useRef(false);\n\n  const ctx = useRef(canvas?.current?.getContext('2d'));\n\n  // useEffect(() => {\n  //   socket.on('canvas-data', (data) => {\n  //     const image = new Image();\n  //     const canvasCtx = canvas.current.getContext('2d');\n  //     image.onload = () => canvasCtx.drawImage(image, 0, 0);\n  //     image.src = data.image;\n  //   });\n  // }, [socket]);\n\n  const drawOnCanvas = useCallback((event) => {\n    if (!ctx || !ctx.current) {\n      return;\n    }\n    ctx.current.beginPath();\n    ctx.current.moveTo(lastX.current, lastY.current);\n    ctx.current.lineTo(event.offsetX, event.offsetY);\n    ctx.current.stroke();\n\n    [lastX.current, lastY.current] = [event.offsetX, event.offsetY];\n  }, []);\n\n  const drawLine = useCallback((event) => {\n    if (!ctx || !ctx.current) {\n      return;\n    }\n\n    // Clear previous line\n    ctx.current.clearRect(0, 0, canvas.current.width, canvas.current.height);\n\n    // Draw new line\n    ctx.current.beginPath();\n    ctx.current.moveTo(lastX.current, lastY.current);\n    ctx.current.lineTo(event.offsetX, event.offsetY);\n    ctx.current.stroke();\n  }, []);\n\n  const handleMouseDown = useCallback((e) => {\n    isDrawing.current = true;\n    [lastX.current, lastY.current] = [e.offsetX, e.offsetY];\n  }, []);\n\n  const dynamicLineWidth = useCallback(() => {\n    if (!ctx || !ctx.current) {\n      return;\n    }\n    if (ctx.current.lineWidth > 90 || ctx.current.lineWidth < 10) {\n      direction.current = !direction.current;\n    }\n    direction.current ? ctx.current.lineWidth++ : ctx.current.lineWidth--;\n    setCurrentWidth(ctx.current.lineWidth);\n  }, []);\n\n  const drawNormal = useCallback(\n    (e) => {\n      if (!isDrawing.current || !ctx.current) return;\n\n      if (isRegularPaintMode.current || isEraserMode.current) {\n        ctx.current.strokeStyle = selectedColor.current;\n\n        setCurrentColor(selectedColor.current);\n\n        autoWidth.current && !isEraserMode.current\n          ? dynamicLineWidth()\n          : (ctx.current.lineWidth = selectedLineWidth.current);\n\n        isEraserMode.current\n          ? (ctx.current.globalCompositeOperation = 'destination-out')\n          : (ctx.current.globalCompositeOperation = 'source-over');\n      } else {\n        setCurrentColor(`hsl(${hue.current},${selectedSaturation.current}%,${selectedLightness.current}%)`);\n        ctx.current.strokeStyle = `hsl(${hue.current},${selectedSaturation.current}%,${selectedLightness.current}%)`;\n        ctx.current.globalCompositeOperation = 'source-over';\n\n        hue.current++;\n\n        if (hue.current >= 360) hue.current = 0;\n\n        autoWidth.current ? dynamicLineWidth() : (ctx.current.lineWidth = selectedLineWidth.current);\n      }\n\n      if (isLineMode) {\n        drawLine(e);\n      } else {\n        drawOnCanvas(e);\n      }\n    },\n    [isLineMode, dynamicLineWidth, drawLine, drawOnCanvas]\n  );\n\n  const stopDrawing = useCallback(() => {\n    isDrawing.current = false;\n\n    // const image = canvas.current.toDataURL('image/png');\n    // socket.emit('canvas-data', { image });\n  }, [socket]);\n\n  const init = useCallback(() => {\n    ctx.current = canvas?.current?.getContext('2d');\n    if (canvas && canvas.current && ctx && ctx.current) {\n      canvas.current.addEventListener('mousedown', handleMouseDown);\n      canvas.current.addEventListener('mousemove', drawNormal);\n      canvas.current.addEventListener('mouseup', stopDrawing);\n      canvas.current.addEventListener('mouseout', stopDrawing);\n\n      canvas.current.width = window.innerWidth - 196;\n      canvas.current.height = window.innerHeight;\n\n      ctx.current.strokeStyle = '#000';\n      ctx.current.lineJoin = 'round';\n      ctx.current.lineCap = 'round';\n      ctx.current.lineWidth = 10;\n    }\n  }, [drawNormal, handleMouseDown, stopDrawing]);\n\n  const handleRegularMode = useCallback(() => {\n    setIsRegularMode(true);\n    isEraserMode.current = false;\n    setIsEraser(false);\n    isRegularPaintMode.current = true;\n  }, []);\n\n  const handleSpecialMode = useCallback(() => {\n    setIsRegularMode(false);\n    isEraserMode.current = false;\n    setIsEraser(false);\n    isRegularPaintMode.current = false;\n  }, []);\n\n  const handleColor = (e) => {\n    setCurrentColor(e.currentTarget.value);\n    selectedColor.current = e.currentTarget.value;\n  };\n\n  const handleWidth = (e) => {\n    setCurrentWidth(e.currentTarget.value);\n    selectedLineWidth.current = e.currentTarget.value;\n  };\n\n  // const clearCanvas = useCallback(() => {\n  //   if (!ctx || !ctx.current || !canvas || !canvas.current) {\n  //     return;\n  //   }\n  //   ctx.current.clearRect(0, 0, canvas.current.width, canvas.current.height);\n  // }, []);\n\n  const handleEraserMode = (e) => {\n    autoWidth.current = false;\n    setIsAutoWidth(false);\n    setIsRegularMode(true);\n    isEraserMode.current = true;\n    setIsEraser(true);\n  };\n\n  const setCurrentSaturation = (e) => {\n    setCurrentColor(`hsl(${hue.current},${e.currentTarget.value}%,${selectedLightness.current}%)`);\n    selectedSaturation.current = e.currentTarget.value;\n  };\n\n  const setCurrentLightness = (e) => {\n    setCurrentColor(`hsl(${hue.current},${selectedSaturation.current}%,${e.currentTarget.value}%)`);\n    selectedLightness.current = e.currentTarget.value;\n  };\n\n  const setAutoWidth = (e) => {\n    autoWidth.current = e.currentTarget.checked;\n    setIsAutoWidth(e.currentTarget.checked);\n\n    if (!e.currentTarget.checked) {\n      setCurrentWidth(selectedLineWidth.current);\n    } else {\n      setCurrentWidth(ctx?.current?.lineWidth ?? selectedLineWidth.current);\n    }\n  };\n\n  return [\n    {\n      canvas,\n      ctx,\n      currentWidth,\n      currentColor,\n      isRegularMode,\n      isAutoWidth,\n      isEraser,\n    },\n    {\n      init,\n      handleRegularMode,\n      handleSpecialMode,\n      handleColor,\n      handleWidth,\n      // handleClear,\n      handleEraserMode,\n      setAutoWidth,\n      setCurrentSaturation,\n      setCurrentLightness,\n    },\n  ];\n};\n\nexport default usePainter;\n",["55","56"],"/home/vend/VSCode/paint-app-realtime/client/src/components/Canvas.jsx",[],"/home/vend/VSCode/paint-app-realtime/client/src/components/Toolbar.jsx",["57","58","59"],"import { useState } from 'react';\nimport {\n  faArrowsAltH,\n  faEraser,\n  faMagic,\n  faPaintBrush,\n  faPencilAlt,\n  faICursor,\n  faEyeSlash,\n  faEye,\n} from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nimport BrushPreview from './BrushPreview';\nimport constants from '../constants';\nimport RectangleIcon from '../icons/rectangle.png';\n\nconst Toolbar = ({\n  currentWidth,\n  currentColor,\n  handleDownload,\n  dateUrl,\n  handleClear,\n  handleSpecialMode,\n  handleEraserMode,\n  setAutoWidth,\n  handleRegularMode,\n  handleColor,\n  handleWidth,\n  setCurrentSaturation,\n  setCurrentLightness,\n  isRegularMode,\n  isAutoWidth,\n  isEraser,\n\n  tool,\n  setTool,\n  undo,\n  redo,\n}) => {\n  const [toolbarOpen, setToolbarOpen] = useState(false);\n\n  return (\n    <aside className=\"toolbar\">\n      {!toolbarOpen ? (\n        <div className=\"toolbar-icon\" onClick={() => setToolbarOpen(true)}>\n          <FontAwesomeIcon icon={faEye} />\n        </div>\n      ) : (\n        <div className=\"toolbar-menu\">\n          <div>\n            <div>\n              <BrushPreview currentWidth={currentWidth} currentColor={currentColor} />\n              <div className=\"tool-section tool-section--lrg\">\n                <div className=\"tool-section\">\n                  <small>\n                    <strong>Brush color</strong>\n                  </small>\n                </div>\n                <input\n                  // disabled={!isRegularMode}\n                  className=\"btn--color\"\n                  type=\"color\"\n                  id=\"toolColorPicker\"\n                  onChange={handleColor}\n                />\n              </div>\n              <div className=\"tool-section\">\n                <small>\n                  <strong>Tools</strong>\n                </small>\n              </div>\n              <div className=\"tool-grid tool-section tool-section--lrg\">\n                <div>\n                  <button\n                    className={`btn btn--tool ${tool === 'selection' ? 'btn--active' : ''}`}\n                    onClick={() => setTool('selection')}\n                  >\n                    <FontAwesomeIcon icon={faICursor} />\n                  </button>\n                </div>\n                <div>\n                  <button\n                    className={`btn btn--tool ${tool === 'line' ? 'btn--active' : ''}`}\n                    onClick={() => setTool('line')}\n                  >\n                    <FontAwesomeIcon icon={faPencilAlt} />\n                  </button>\n                </div>\n                <div>\n                  <button\n                    className={`btn btn--tool ${tool === 'pencil' ? 'btn--active' : ''}`}\n                    onClick={() => setTool('pencil')}\n                  >\n                    <FontAwesomeIcon icon={faPaintBrush} />\n                  </button>\n                </div>\n                <div>\n                  <button\n                    className={`btn btn--tool ${tool === 'rectangle' ? 'btn--active' : ''}`}\n                    onClick={() => setTool('rectangle')}\n                  >\n                    <img width={26} src={RectangleIcon} alt=\"rectangle\" />\n                  </button>\n                </div>\n                <div>\n                  <button\n                    className={`btn btn--tool ${tool === 'text' ? 'btn--active' : ''}`}\n                    onClick={() => setTool('text')}\n                  >\n                    <p className=\"action-text\">T</p>\n                  </button>\n                </div>\n\n                {/* asdasdkjasdnj */}\n                {/* <div>\n              <button\n                className={`btn btn--tool ${!isRegularMode ? 'btn--dream-active' : ''}`}\n                onClick={handleSpecialMode}\n              >\n                <FontAwesomeIcon icon={faMagic} />\n              </button>\n            </div>\n            <div>\n              <button className={`btn btn--tool ${isEraser ? 'btn--eraser-active' : ''}`} onClick={handleEraserMode}>\n                <FontAwesomeIcon icon={faEraser} />\n              </button>\n            </div>\n            <div>\n              <input\n                disabled={isEraser}\n                checked={isAutoWidth}\n                id=\"tool-autowidth\"\n                type=\"checkbox\"\n                onChange={setAutoWidth}\n                title=\"Dynamic brush size\"\n              />{' '}\n              <label htmlFor=\"tool-autowidth\" className={`btn btn--tool ${isAutoWidth ? 'btn--width-active' : ''}`}>\n                <FontAwesomeIcon icon={faArrowsAltH} />\n              </label>\n            </div> */}\n              </div>\n              {!isAutoWidth && (\n                <div className=\"tool-section tool-section--lrg\">\n                  <div className=\"tool-section\">\n                    <small>\n                      <strong>Brush size</strong>\n                    </small>\n                  </div>\n                  <div className=\"tool-section\">\n                    <input defaultValue={constants.brushSize} type=\"range\" min=\"5\" max=\"90\" onChange={handleWidth} />\n                  </div>\n                </div>\n              )}\n              {!isRegularMode && (\n                <div className=\"tool-section tool-section--lrg\">\n                  <div className=\"tool-section\">\n                    <small>\n                      <strong>Magic brush</strong>\n                    </small>\n                  </div>\n                  <div className=\"tool-section\">\n                    <label>\n                      <small>Saturation</small>\n                    </label>\n                    <input defaultValue=\"100\" type=\"range\" min=\"0\" max=\"100\" onChange={setCurrentSaturation} />\n                  </div>\n                  <label>\n                    <small>Lightness</small>\n                  </label>\n                  <input defaultValue=\"50\" type=\"range\" min=\"0\" max=\"100\" onChange={setCurrentLightness} />\n                </div>\n              )}\n            </div>\n\n            <div className=\"toolbar-eye\" onClick={() => setToolbarOpen(false)}>\n              <FontAwesomeIcon icon={faEyeSlash} />\n            </div>\n          </div>\n        </div>\n      )}\n    </aside>\n  );\n};\n\nexport default Toolbar;\n","/home/vend/VSCode/paint-app-realtime/client/src/components/BrushPreview.jsx",[],"/home/vend/VSCode/paint-app-realtime/client/src/constants/index.js",[],"/home/vend/VSCode/paint-app-realtime/client/src/components/CanvasV2.jsx",[],"/home/vend/VSCode/paint-app-realtime/client/src/utils/functions.js",[],"/home/vend/VSCode/paint-app-realtime/client/src/hooks/useHistory.js",[],"/home/vend/VSCode/paint-app-realtime/client/src/components/ActionButton.jsx",[],{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","severity":1,"message":"65","line":1,"column":41,"nodeType":"66","messageId":"67","endLine":1,"endColumn":50},{"ruleId":"64","severity":1,"message":"68","line":8,"column":22,"nodeType":"66","messageId":"67","endLine":8,"endColumn":35},{"ruleId":"69","severity":1,"message":"70","line":123,"column":6,"nodeType":"71","endLine":123,"endColumn":14,"suggestions":"72"},{"ruleId":"60","replacedBy":"73"},{"ruleId":"62","replacedBy":"74"},{"ruleId":"64","severity":1,"message":"75","line":3,"column":3,"nodeType":"66","messageId":"67","endLine":3,"endColumn":15},{"ruleId":"64","severity":1,"message":"76","line":4,"column":3,"nodeType":"66","messageId":"67","endLine":4,"endColumn":11},{"ruleId":"64","severity":1,"message":"77","line":5,"column":3,"nodeType":"66","messageId":"67","endLine":5,"endColumn":10},"no-native-reassign",["78"],"no-negated-in-lhs",["79"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'setIsLineMode' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useCallback has an unnecessary dependency: 'socket'. Either exclude it or remove the dependency array.","ArrayExpression",["80"],["78"],["79"],"'faArrowsAltH' is defined but never used.","'faEraser' is defined but never used.","'faMagic' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"81","fix":"82"},"Update the dependencies array to be: []",{"range":"83","text":"84"},[3991,3999],"[]"]